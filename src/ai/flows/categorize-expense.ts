// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Expense categorization flow using Genkit and Gemini.
 *
 * categorizeExpense - A function that suggests categories for uncategorized expenses.
 * CategorizeExpenseInput - The input type for the categorizeExpense function.
 * CategorizeExpenseOutput - The return type for the categorizeExpense function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const CategorizeExpenseInputSchema = z.object({
  transactionDescription: z
    .string()
    .describe('The description of the uncategorized transaction.'),
  pastSpendingHabits: z
    .string()
    .optional()
    .describe('Optional information about the user\'s past spending habits.'),
  predefinedCategories: z
    .array(z.string())
    .describe('An array of predefined expense categories.'),
});

export type CategorizeExpenseInput = z.infer<typeof CategorizeExpenseInputSchema>;

const CategorizeExpenseOutputSchema = z.object({
  suggestedCategory: z
    .string()
    .describe('The AI-suggested category for the transaction.'),
  confidence: z
    .number()
    .min(0)
    .max(1)
    .describe('The confidence level of the suggested category (0 to 1).'),
  reasoning: z
    .string()
    .optional()
    .describe('The AI\'s reasoning for suggesting this category.'),
});

export type CategorizeExpenseOutput = z.infer<typeof CategorizeExpenseOutputSchema>;

export async function categorizeExpense(input: CategorizeExpenseInput): Promise<CategorizeExpenseOutput> {
  return categorizeExpenseFlow(input);
}

const categorizeExpensePrompt = ai.definePrompt({
  name: 'categorizeExpensePrompt',
  input: {
    schema: CategorizeExpenseInputSchema,
  },
  output: {
    schema: CategorizeExpenseOutputSchema,
  },
  prompt: `You are an AI assistant that helps users categorize their expenses.

Given the following transaction description, past spending habits, and a list of predefined categories, suggest the most appropriate category for the transaction.

Transaction Description: {{{transactionDescription}}}

Past Spending Habits: {{{pastSpendingHabits}}}

Predefined Categories: {{#each predefinedCategories}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}

Consider the context and provide a confidence level (0 to 1) for your suggestion. Briefly explain your reasoning.

Output MUST be valid JSON conforming to the following schema:
${JSON.stringify(CategorizeExpenseOutputSchema.describe(''))}`,
});

const categorizeExpenseFlow = ai.defineFlow(
  {
    name: 'categorizeExpenseFlow',
    inputSchema: CategorizeExpenseInputSchema,
    outputSchema: CategorizeExpenseOutputSchema,
  },
  async input => {
    const {output} = await categorizeExpensePrompt(input);
    return output!;
  }
);
